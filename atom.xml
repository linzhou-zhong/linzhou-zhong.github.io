<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://linzhou-zhong.github.io</id>
    <title>Chic</title>
    <updated>2020-08-07T22:22:03.905Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://linzhou-zhong.github.io"/>
    <link rel="self" href="https://linzhou-zhong.github.io/atom.xml"/>
    <subtitle>ðŸ‘“</subtitle>
    <logo>https://linzhou-zhong.github.io/images/avatar.png</logo>
    <icon>https://linzhou-zhong.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Chic</rights>
    <entry>
        <title type="html"><![CDATA[How to use euqals() and hashCode() in Java]]></title>
        <id>https://linzhou-zhong.github.io/post/how-to-use-euqals-and-hashcode-in-java/</id>
        <link href="https://linzhou-zhong.github.io/post/how-to-use-euqals-and-hashcode-in-java/">
        </link>
        <updated>2020-08-05T03:29:35.000Z</updated>
        <summary type="html"><![CDATA[<p>Hi there !</p>
<p>Today I'm going to talk about one of questions that are important but easily ignore by us : <code>equals()</code> and <code>hashCode()</code> methods in Java.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Hi there !</p>
<p>Today I'm going to talk about one of questions that are important but easily ignore by us : <code>equals()</code> and <code>hashCode()</code> methods in Java.</p>
<!-- more -->
<p>I found both these methods extremly important in the development process, so if the person knows nothing about them, it can cause a lot of the issues in the application like missiong data inside the hashed data structures, wrong equality process results, etc.</p>
<p>So, come with me and let's move on to discover these 2 methods.</p>
<p>As you might know, there is a class <code>Object</code>, that is a parent of each other class in Java, which means that if we create a new class <code>Humanity</code> in such a way :</p>
<pre><code class="language-java">public class Humain { 
}
</code></pre>
<p>It will implicitly extend the <code>Object</code> class. That's why, even if it seems that our <code>Humain</code> class is empty, it has several methods available inherited from the <code>Object</code> class:</p>
<ul>
<li>equals()</li>
<li>hashCode()</li>
<li>toString()</li>
<li>getClass()</li>
<li>notify()</li>
<li>notifyAll()</li>
<li>wait()</li>
</ul>
<p>As rest of the methods are out of the scope of the current article ðŸ˜…, let's focus on <code>equals()</code> and hashCode() ones.</p>
<h1 id="equals"><em>equals()</em></h1>
<p>So <code>equals(Object o)</code> method is used to indicate whether some other Object <code>o</code> is equal to the current object (on which the method has been invoked).</p>
<p>The explanation looks very clear, but one question could appear: &quot;Wait, why do we need this method, we have <code>==</code> operation will be enough right ?&quot;</p>
<p>Well, thanks for this common question, but I have to say <code>==</code> operator works perfectly for the primitive data types like <code>int</code>, <code>long</code>, <code>boolean</code>, etc. But for the non-primitive (or reference) data type (like Humanity, Animal, or even AlienðŸ‘½) <code>==</code> operator shows not the equality of the objects, but whether they refer to the same object in memory. It works in such a way due to Java Memory Model (JMM) : primitives and reference objects are kept in different memory parts.</p>
<p>Let me demonstrate this in code.</p>
<pre><code class="language-java">public class Humanity {
    private String name;

    public Humanity(String name){
        this.name = name;
    }
}

class Main {
    public static void main(String[] args) {
        Humanity h1 = new Humanity(&quot;Linzhou&quot;);
        Humanity h2 = new Humanity(&quot;Simpson&quot;);

        System.out.println(h1 == h2);
    }
}
</code></pre>
<p>We'll have the following output:</p>
<pre><code>false
</code></pre>
]]></content>
    </entry>
</feed>