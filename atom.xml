<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://linzhou-zhong.github.io</id>
    <title>Linnnnn</title>
    <updated>2020-09-01T14:23:24.904Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://linzhou-zhong.github.io"/>
    <link rel="self" href="https://linzhou-zhong.github.io/atom.xml"/>
    <subtitle>Profitez bien et Bon Caf√© ‚òïÔ∏è</subtitle>
    <logo>https://linzhou-zhong.github.io/images/avatar.png</logo>
    <icon>https://linzhou-zhong.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Linnnnn</rights>
    <entry>
        <title type="html"><![CDATA[Checked and Unchecked Exceptions in Java]]></title>
        <id>https://linzhou-zhong.github.io/post/checked-and-unchecked-exceptions-in-java/</id>
        <link href="https://linzhou-zhong.github.io/post/checked-and-unchecked-exceptions-in-java/">
        </link>
        <updated>2020-08-31T07:36:30.000Z</updated>
        <content type="html"><![CDATA[<p>Hi there !</p>
<p>I'm recently reading some books and preparing for the OCA Certification Test and I really want to share some interesting and important parts which are always omitted by us. üëª</p>
<p>In Java, there are two types of exceptions:</p>
<h2 id="1-checked-exception">1. Checked Exception</h2>
<p>They are the exceptions that are checked at compile time. If some code within a method throws a checked exception, then the method must either handle the exception or it must specify the exception using <code>throws</code> keyword.</p>
<p>a. Innvalid external conditions that cannot be directly controlled by the program.</p>
<p>b. In addition to <code>Error</code> and <code>RuntimeException</code> with its subclasses : <strong>ClassNotFoundException</strong>, <strong>NamingException</strong>, <strong>ServletException</strong>, <strong>SQLException</strong>, <strong>IOException</strong>.</p>
<h2 id="1-unchecked-exception">1. Unchecked Exception</h2>
<p>They are the exceptions that are not checked at compiled time. It is up to the programmers to be civilized, and specify or catch the exceptions.</p>
<p>a.  Defects or logical errors of the program, and cannot be recovered at Runtime.</p>
<p>b. Including <code>Error</code> and <code>RuntimeException</code> and their subclasses :<br>
<strong>OutOfMemoryError</strong>, <strong>UndeclaredThrowableException</strong>, <strong>IllegalArgumentException</strong>, <strong>IllegalMonitorStateException</strong>, <strong>NullPointerException</strong>, <strong>IndexOutOfBoundsException</strong>.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Immutable classes in Java]]></title>
        <id>https://linzhou-zhong.github.io/post/immutable-classes-in-java/</id>
        <link href="https://linzhou-zhong.github.io/post/immutable-classes-in-java/">
        </link>
        <updated>2020-08-31T05:12:50.000Z</updated>
        <content type="html"><![CDATA[<p>Hi there!</p>
<p>Now we are going to taling about immutable classes in Java and show how to make the class immutable.</p>
<p>The class is called immutable if it is impossible to change its state and content after the initialization.</p>
<p>The benefits of such classes are:</p>
<ol>
<li><em>Safety</em>: Can be sure that no one is able to change its state.</li>
<li><em>Thread Safety</em>: The same as mentioned above is also actual for the multithreaded environment.</li>
<li><em>Cacheable</em>: Instances could be easily cached by VM cache or custom implementation, as we are sure that their values are not going to be changed.</li>
<li><em>Hashable</em>: Such classes could be safely put inside the hash collections (for example, <code>HashMap</code>, <code>HashSet</code> etc) and of course, if <code>equals()</code> and <code>hashCode()</code> methods are overriden in a proper way.</li>
</ol>
<p>So, let's try to implement the immutable class and take a look how it can be optimized step by step.</p>
<p>Consider, we have the following class <code>Adult</code>:</p>
<pre><code class="language-java">public class Adult {
    private String name;
    private Address address;
    private List&lt;String&gt; children;

    public String getName(){
        return this.name;
    }

    public void setName(String name){
        this.name = name;
    }
    
    public Address getAddress(){
        return this.address;
    }
    
    public void setAddress(Address ads){
        this.address = ads;
    }
    
    public List&lt;String&gt; getChlldren(){
        return this.children;
    }
    
    public void setChildre(List&lt;String&gt; children){
        this.children = children;
    }
}
</code></pre>
<p>And <code>Adult</code> class has a field <code>address</code> of type <code>Address</code>:</p>
<pre><code class="language-java">public class Address{
    private String country;
    private String city;

    public Address(String country, String city){
        this.country = country;
        this.city = city;
    }

    public String getCountry(){
        return this.country;
    }

    public void setCountry(String country){
        this.country = country;
    }

    public String getCity(){
        return this.city;
    }

    public void setCity(String city){
        this.city = city;
    }
}
</code></pre>
<p>We hope <code>Address</code> class is not going to be changed, so we need firstly to remove setters of <code>Address</code>:</p>
<h2 id="1-removing-setters">1. Removing setters:</h2>
<pre><code class="language-java">public class Adult{
    private String name;
    private Address address;
    private List&lt;String&gt; children;

    //getters:
    public String getName(){
        return this.name;
    }

    public Address getAddress(){
        return this.address;
    }

    public List&lt;String&gt; getChildren(){
        return this.children;
    }
}
</code></pre>
<p>Cool, looks like they can not be changed anymore. So let's provide the appropriate constructor.</p>
<h2 id="2-adding-args-constructor">2. Adding args constructor</h2>
<pre><code class="language-java">public class Adult{
    private String name;
    private Address address;
    private List&lt;String&gt; children;

    public Adult(String name, Address address, List&lt;String&gt; children) {
        this.name = name;
        this.address = address;
        this.children = children;
    }

    // getters

    public String getName(){
        return this.name;
    }

    public Address getAddress(){
        return this.address;
    }

    public List&lt;String&gt; getChildren(){
        return this.children;
    }
}
</code></pre>
<p>Have we finished now? Not yet, there are seceral issues hidden üê≠. First of all, our immutability could be modified by using one of the OOP principles : <code>Inheritance</code>. Let's see how could is it possbile :</p>
<pre><code class="language-java">public class Cheater extends Adult {
    private String cheaterName;

    public Cheater (String name, Address address, List&lt;String&gt; children){
        super(name, address, children);
        cheaterName = name;
    }

    public void breakImmutability(String newName){
        cheaterName = newName;
        System.out.println(&quot;Immutability has been destoried&quot;);
    }

    @Override
    public String getName(){
        return cheaterName;
    }
} 
</code></pre>
<pre><code class="language-java">public class Main {
    public static void main(String[] args) {
        Cheater cheater = new Cheater(&quot;Linzhou&quot;, new Address(&quot;China&quot;, &quot;Sichuan&quot;), Collections.emptyList());
        Adult adult = (Adult) cheater;

        System.out.println(adult.getName());
        cheater.breakImmutability(&quot;Fake Linzhou&quot;);
        System.out.println(adult.getName());
    }
}
</code></pre>
<p>The output will be as follow :<br>
<code>Linzhou</code><br>
<code>Immutability has been destoried</code><br>
<code>Fake Linzhou</code></p>
<h2 id="3-making-class-as-final-to-protect-it-from-being-extended">3. Making class as final to protect it from being extended</h2>
<pre><code class="language-java">public final class Aduilt {
    private String name;
    private Address address;
    private List&lt;String&gt; children;

    // getters:
    public String getName() {
        return name;
    }

    public Address getAddress() {
        return address;
    }

    public List&lt;String&gt; getStuff() {
        return stuff;
    }
}
</code></pre>
<p>The output will be :<br>
<code>Linzhou</code><br>
<code>Linzhou</code><br>
And Inheritage will be no more allowed. ‚ö†Ô∏è</p>
<p>There is one more interesting issue : In Java when we pass the value of an object, we are passing the reference to it. So the state of the objects could be changed by the side effects. Let's check it out.</p>
<pre><code class="language-java">public class Main {
    public static void mian (String[] args){
        Address ads = new Address(&quot;China&quot;,&quot;Sichuan&quot;);
        List&lt;String&gt; children = new ArrayList&lt;&gt;();
        children.add(&quot;child1&quot;);
        children.add(&quot;child2&quot;);

        Adult adult = new Adult(&quot;Linzhou&quot;, address, children);

        System.out.println(&quot;Country: &quot; + adult.getAddress().getCountry());
        System.out.println(&quot;City: &quot; + adult.getAddress().getCity());
        System.out.println(&quot;Children: &quot; + adult.getChildren());

        address.setCountry(&quot;France&quot;);
        address.setCity(&quot;Paris&quot;);
        children.remove(&quot;child1&quot;);
        children.remove(&quot;child2&quot;);
        System.out.println(&quot;Immutability has been destoried&quot;);
         System.out.println(&quot;Country: &quot; + adult.getAddress().getCountry());
        System.out.println(&quot;City: &quot; + adult.getAddress().getCity());
        System.out.println(&quot;Children: &quot; + adult.getChildren());
    }
}
</code></pre>
<p>The output will be :<br>
<code>Country: China</code><br>
<code>City: Sichuan</code><br>
<code>Children: [child1, child2]</code><br>
<code>Immutability has been destoried</code><br>
<code>Country: France</code><br>
<code>City: Paris</code><br>
<code>Children: []</code></p>
<p>The issue could be fixed by:</p>
<h2 id="4-initializing-all-non-primitive-mutable-fields-via-constructor-by-performing-a-deep-copy">4. Initializing all non-primitive mutable fields via constructor by performing a deep copy</h2>
<pre><code class="language-java">public final class Adult {
    private String name;
    private Address address;
    private List&lt;String&gt; children;

    public Aduilt (String name, Address address, List&lt;String&gt; Children) {
        this.name = name;
        this.address = new Address(address.getCountru(), address.getCity());
        this.children = new ArrayList&lt;&gt;(children);
    }

    //getters:
    public String getNmae(){
        return name;
    }

    public Address getAddress() {
        return address;
    }

    public List&lt;String&gt; getChildren() {
        return children;
    }
}
</code></pre>
<p>Now the output of Main class is more predictable:<br>
<code>Country: China</code><br>
<code>City: Sichuan</code><br>
<code>Children: [child1, child2]</code><br>
<code>Immutability has been destoried</code><br>
<code>Country: China</code><br>
<code>City: Sichuan</code><br>
<code>Children: [child1, child2]</code><br>
But nothing is changed right ? üòÑ I hope so that but there have same side effect issue could be produced through getter methods :</p>
<pre><code class="language-java">public class Main {
    public static void main (String[] args) {
        Address ads = new Address(&quot;China&quot;,&quot;Sichuan&quot;);
        List&lt;String&gt; children = new ArrayList&lt;&gt;();
        children.add(&quot;child1&quot;);
        children.add(&quot;child2&quot;);

        Adult adult = new Adult(&quot;Linzhou&quot;, address, children);

        System.out.println(&quot;Country: &quot; + adult.getAddress().getCountry());
        System.out.println(&quot;City: &quot; + adult.getAddress().getCity());
        System.out.println(&quot;Children: &quot; + adult.getChildren());

        Address ads = adult.getAddress();
        ads.setCountry(&quot;France&quot;);
        ads.setCity(&quot;Paris&quot;);

        List&lt;String&gt; cld = adult.getChildren();
        cld.remove(&quot;child1&quot;);
        cld.remove(&quot;child2&quot;);

        System.out.println(&quot;Immutability has been destoried&quot;);
         System.out.println(&quot;Country: &quot; + adult.getAddress().getCountry());
        System.out.println(&quot;City: &quot; + adult.getAddress().getCity());
        System.out.println(&quot;Children: &quot; + adult.getChildren());
    }
}
</code></pre>
<p><code>Country: China</code><br>
<code>City: Sichuan</code><br>
<code>Children: [child1, child2]</code><br>
<code>Immutability has been destoried</code><br>
<code>Country: France</code><br>
<code>City: Paris</code><br>
<code>Children: []</code><br>
``</p>
<p>So, it goes with another step to be done:</p>
<h2 id="5-performing-cloning-of-the-returned-non-primitive-mutable-object-in-getter-methods">5. Performing cloning of the returned non-primitive mutable object in getter methods</h2>
<pre><code class="language-java">
public final class Adult {
    private String name;
    private Address address;
    private List&lt;String&gt; children;

    public Aduilt(String name, Address address, List&lt;String&gt; children) {
        this.name = name;
        this.address = new Address(address.getCountry(), address.getCity());
        this.children = new ArrayList&lt;&gt;(children);
    }

    public String getName() {
        return name;
    }

    public Address getAddress() {
        return new Address(address.getCountry(), address.getCity());
    }

    public List&lt;String&gt; getChildren () {
        return new ArrayList&lt;&gt;(children);
    }
}
</code></pre>
<p>Now the output is :<br>
<code>Country: China</code><br>
<code>City: Sichuan</code><br>
<code>Children: [child1, child2]</code><br>
<code>Immutability has been destoried</code><br>
<code>Country: China</code><br>
<code>City: Sichuan</code><br>
<code>Children: [child1, child2]</code></p>
<p>There is one more optional step to be done, and to make all class fields as final.</p>
<p>Let's summarize out steps:</p>
<ol>
<li>Removing setters.</li>
<li>Adding all args constructor.</li>
<li>Marking the class as <code>final</code> to protect it from being extended.</li>
<li>Initializing all non-primitive mutable fields vias constructor by performing a deep copy.</li>
<li>Performing cloning of the the returned non-prmitive mutable object in getter methods.</li>
<li>Marking all class fields as <code>final</code> (optional)</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to use euqals() and hashCode() in Java]]></title>
        <id>https://linzhou-zhong.github.io/post/how-to-use-euqals-and-hashcode-in-java/</id>
        <link href="https://linzhou-zhong.github.io/post/how-to-use-euqals-and-hashcode-in-java/">
        </link>
        <updated>2020-08-04T03:29:35.000Z</updated>
        <content type="html"><![CDATA[<p>Hi there !</p>
<p>Today I'm going to talk about one of questions that are important but easily ignore by us : <code>equals()</code> and <code>hashCode()</code> methods in Java.</p>
<p>I found both these methods extremly important in the development process, so if the person knows nothing about them, it can cause a lot of the issues in the application like missiong data inside the hashed data structures, wrong equality process results, etc.</p>
<p>So, come with me and let's move on to discover these 2 methods.</p>
<p>As you might know, there is a class <code>Object</code>, that is a parent of each other class in Java, which means that if we create a new class <code>Humanity</code> in such a way :</p>
<pre><code class="language-java">public class Humain { 
}
</code></pre>
<p>It will implicitly extend the <code>Object</code> class. That's why, even if it seems that our <code>Humanity</code> class is empty, it has several methods available inherited from the <code>Object</code> class:</p>
<ul>
<li>equals()</li>
<li>hashCode()</li>
<li>toString()</li>
<li>getClass()</li>
<li>notify()</li>
<li>notifyAll()</li>
<li>wait()</li>
</ul>
<p>As rest of the methods are out of the scope of the current article üòÖ, let's focus on <code>equals()</code> and hashCode() ones.</p>
<h1 id="equals"><em>equals()</em></h1>
<p>So <code>equals(Object o)</code> method is used to indicate whether some other Object <code>o</code> is equal to the current object (on which the method has been invoked).</p>
<p>The explanation looks very clear, but one question could appear: &quot;Wait, why do we need this method, we have <code>==</code> operation will be enough right ?&quot;</p>
<p>Well, thanks for this common question, but I have to say <code>==</code> operator works perfectly for the primitive data types like <code>int</code>, <code>long</code>, <code>boolean</code>, etc. But for the non-primitive (or reference) data type (like Humanity, Animal, or even AlienüëΩ) <code>==</code> operator shows not the equality of the objects, but whether they refer to the same object in memory. It works in such a way due to Java Memory Model (JMM) : primitives and reference objects are kept in different memory parts.</p>
<p>Let me demonstrate this in code.</p>
<pre><code class="language-java">public class Humanity {
    private String name;

    public Humanity(String name){
        this.name = name;
    }
}

class Main {
    public static void main(String[] args) {
        Humanity h1 = new Humanity(&quot;Linzhou&quot;);
        Humanity h2 = new Humanity(&quot;Simpson&quot;);

        System.out.println(h1 == h2);
    }
}
</code></pre>
<p>We'll have the following output:</p>
<pre><code>false
</code></pre>
<p>But what would it be, if use <code>equals()</code> method to compare these 2 <code>Humanity</code> instances instead of <code>==</code> operator ?</p>
<pre><code class="language-java">class Main {
    public static void main (String[] args) {
        Humanity h1 = new Humanity(&quot;Linzhou&quot;);
        Humanity h2 = new Humanity(&quot;Simpson&quot;);

        System.out.println(h1.equals(h2));
    }
}
</code></pre>
<p>Would it return <code>true</code>? Nope, the output is <code>false</code> again. How come ? The answer is simple: right now we are using the <code>Object</code> class implementation of <code>equals()</code> method,so let's take a look how it looks like:</p>
<pre><code class="language-java">public boolean equals(Object o) {
    return (this == o);
}
</code></pre>
<p>As we see, it calls the == operator under the hood, so the false output looks more clear more.</p>
<p>Of course, this implementation doesn't satisfy our needs, so we can override it.</p>
<p>But first let's postpone the overriding process a little bit to learn several equals() method rules, that are going to help us in our implementation:</p>
<ol>
<li>Reflexive: <code>a.equals(a)</code> must always return <code>true</code> (of course, if <code>a != null</code>, otherwise <code>NullPointeException will be thrown</code>);</li>
<li>Symmetric: if <code>a.equals(b)</code> return <code>true</code>, then <code>b.equals(a)</code> must always return <code>true</code> as well.</li>
<li>Transitive: if <code>a.equals(b)</code> returns <code>true</code> and <code>a.equals(c)</code> returns <code>true</code>, it means, that <code>b.equals(c)</code> must be <code>true</code> as well.</li>
<li>Consistent: if <code>a.equals(b)</code> return <code>true</code> (or <code>false</code>) and neither <code>a</code> nor <code>b</code> has been changed, <code>a.equals(b)</code> should always return the same result.</li>
</ol>
<p>The rules are simple and intuitive, but anyway it is extremely important to follow them to omit the possbile issues in the apllication.</p>
<p>Let's get back to our <code>Humanity</code> comparison problem:<br>
I propose not to hurry up, but take a look at the method signature to think, how to override it correctly. As you might have noticed, <code>equals()</code> method accepts <code>Object o</code> as a parameter, so it will be impossible to write something like this:</p>
<pre><code class="language-java">@Override
public boolean equals(Object o){
    return this.name.equals(o.name);
}
</code></pre>
<p>as <code>Object</code> class knows notoriously nothing about name property - compiler error. Also, this code could throw <code>NullPointException</code> if <code>name == null</code> or <code>o == null</code>. And, yes, we could write something like this:</p>
<pre><code class="language-java">public boolean equals(Humanity h){
    return name.equals(h.name);
}
</code></pre>
<p>But it will not the overriding, but the overloading.<br>
There are a lot of librairies and APIs, that use <code>equals()</code> method under the hood, so as you might have understood, they know nothing about our overloading version of the <code>equals()</code> method, but will call that one from the <code>Object</code> class and our comparison issue will appear again. It means that the overloading is not an appropriate solution for our case.</p>
<p>As we have seen before, the <code>Object</code> class <code>equals()</code> implementation uses <code>==</code> operator to compare the objects. If two objects point to the same object in memory, they are definitely equal. It's a good point to start our overriding.</p>
<ol>
<li>Compare objects using <code>==</code> operator.</li>
</ol>
<pre><code class="language-java">@Override
public boolean equals(Object o){
    return this == o;
}
</code></pre>
<p>We have mentioned above, that we could face the <code>NullPointException</code> if <code>Object o</code> is equal to <code>null</code>. Alse, we do know, that our current object (<code>Humanity</code> instance, on which we are going to call <code>equals()</code> method) is not <code>null</code> for sure, as otherwise the <code>NullPointException</code> will be thrown on method call on <code>null</code> <code>Humanity</code> instance, but it is not our business right now. It goes with another step:</p>
<ol start="2">
<li>Check, whether the Object o parameter is not null. If yes, return false.</li>
</ol>
<pre><code class="language-java">@Override
public boolean equuals(Object o){
    if (this == o)
        return true;
    if (o == null)
        return false;
    return true;
}
</code></pre>
<p>Looks better, but not enough. As we have mentioned before, there is one more difficulty left: <code>o</code> is <code>Object</code> type, so it's impossible to reach <code>Humanity</code> data from it. Of course, we could cast it to <code>Humanity</code> and it seems that we are good to go. But, unfortunately, it is not safe. Just take a look at the code:</p>
<pre><code class="language-java">@Override
public boolean equals(Object o){
    if (this == o)
        return true;
    if (o == null)
        return false;
    Hummanity h = (Humanity) o;
    return this.name.equals(h.name);
}
</code></pre>
<p>Let me introduce the new class <code>Dog</code>:</p>
<pre><code class="language-java">public class Dog{
    private String name;

    public Dog(String name)
        this.name = name;
}
</code></pre>
<p>Take a look how to break our <code>equals()</code> implementation:</p>
<pre><code class="language-java">class Main{
    public static void main (String[] args){
        Humanity h = new Humanity(&quot;Linzhou&quot;);
        Dog dog = new Dog(&quot;poppy&quot;);

        System.out.println(h.equals(dog));
    }
}
</code></pre>
<p>Unfortunately there is no compile error, as even <code>dog</code> is <code>Dog</code> type, but it is an <code>Object</code> type as well(<code>Object</code> is a parent of each class), so it is allowed to pass the <code>dog</code> inside our method. But if we run this code, we'll have an exception:</p>
<p><code>Exception in thread &quot;main&quot; java.lang.ClassCastException: Dog cannot be cast to Humanity</code></p>
<p>How can we cast a dog to a humanity, which makes no sense right ?</p>
<ol start="3">
<li>Check, whether the Object o parameter has the same type, as our instance. If no, return false.</li>
</ol>
<pre><code class="language-java">@Override
public boolean equals(Object o){
    if (this == o)
        return true;
    if (o == null)
        return false;
    if (this.getClass() != o.getClass())
        return false;

    return true;
}
</code></pre>
<p>Here we have used <code>getClass()</code> method, that comes from the <code>Object</code> class. This method just returns the <code>Class</code> of the object, that calls it. So for dog.getClass(); it returns <code>Dog</code>, for <code>h.getClass()</code> which returns <code>Humanity</code> and so on.</p>
<ol start="4">
<li>Cast the Object to the current class</li>
<li>Compare the chosen fields values.</li>
</ol>
<pre><code class="language-java">@Override
public boolean equals(Object o){
    if (this == o)
        return true;
    if (o == null)
        return false;
    if (this.getClass() != o.getClass())
        return false;
    Humanity h = (Humanity) o;
    return Objects.equals(this.name, h.name);
}
</code></pre>
<p>We have used <code>Objects.equals()</code> method here to simplify the logic and omit this.name null checking, as it has been already implemented inside the used method of <code>Objects</code> class:</p>
<pre><code class="language-java">public static boolean equals(Object a, object b){
    return (a == b) || (a != null &amp;&amp; a.equals(b));
}
</code></pre>
<p>Let's try to check, whether it works correctly:</p>
<pre><code class="language-java">class Main {
    public static void main(String[] args){
        Humanity h1 = new Humanity(&quot;Linzhou&quot;);
        Humanity h2 = new Humanity(&quot;Linzhou&quot;);
        Dog dog = new Dog(&quot;poppy&quot;);

        System.out.println(h1.equals(h2));
        System.out.println(h1.equals(dog));
    }
}
</code></pre>
<p>The output is finnaly predictable:<br>
<code>true</code> and <code>false</code>.</p>
<p>For now, that's for the <code>equals()</code> method, but we'll return to it a little bit later. Let's move on to <code>hasCode()</code>.</p>
<h1 id="hashcode"><em>hashCode()</em></h1>
<p><code>hashCode()</code> method returns a hash code value of the object. Hash code, for now, is some int value. And that's it.</p>
<p>Let's try to see how it works to make it more clear. I propose to use our well-known <code>Humanity</code> class for this:</p>
<pre><code class="language-java">class Main {
    public static void main(String[] args){
        Humanity h = new Humanity(&quot;Linzhou&quot;);
        int hashCode = h.hashCode();
        System.out.println(hashCode);
    }
}
</code></pre>
<p>The output will be different from several computers. But how could is it possbile ?<br>
To answer this question, we need to remember that we haven't overridden the <code>hashCode()</code> method yet, so we are using the <code>Object</code> implementation now. If we go to the <code>Object</code> class, we'll see the following:</p>
<pre><code class="language-java">public native int jashCode();
</code></pre>
<p>First, <code>native</code> in Java is used with methods to indicate, that the method is implemented in other languages (for example, C or C ++). It is possbile to call such methods using JNI. Such methods are used for te performance reasons or to access system or hardware resources, that is not possible to proceed using Java.</p>
<p>Bref, let's make this method behave predictably by overriding it:</p>
<pre><code class="language-java">@Override
public int hashCode() {
    return 50;
}
Class Main {
    public static void main(String[] args){
        Humanity h = new Humanity(&quot;Linzhou&quot;);
        int hashCode = h.hashCode();
        System.out.orintln(hasCode);
    }
}
</code></pre>
<p>As we might expect, the output is <code>50</code>.</p>
<p>Let's me present several <code>hashCode()</code> method rules and I hope we can understant why we need <code>equals()</code> combined with <code>hashCode()</code>.</p>
<ol>
<li>Each invocation of <code>hashCode()</code> method on the same object that hasn't been changed must produce the same result each time.</li>
<li>If twi objects are equal through the <code>equals()</code> method, then invoking the <code>hashCode()</code> method on each of these two objects must produce the same result:</li>
</ol>
<pre><code class="language-java">// if : 
a.equals(b) is true
//then :
a.hashCode() == b.hashCode()
</code></pre>
<ol start="3">
<li>but if invoking the <code>hashCode()</code> method on two objects produces the same result, it doesn't mean that both of them are equal (through <code>equals()</code> method). Because, the <code>int</code> type has a limited scope of the values from -2147483648 to 2147483647, which means if we have a number of objects over than its limited scope and it will create a pair of hashCode with same values of two objects even if both of them are completely not the same type.</li>
</ol>
<p>So as we have noticed, the 2nd and 3rd rules show that <code>equals()</code> and <code>hashCode()</code> are connected.</p>
<p>Let's go deeper, hashed collections can provide fast access to elements (Time complexity O(1)). The most popular Java Hashed collections is <code>HashMap</code>. It is used to keep 'key - value' pairs.</p>
<pre><code class="language-java">Map&lt;Integer, String&gt; map = new HashMap&lt;&gt;();
map.put(1, &quot;Hello&quot;);
map.put(2, &quot;Bonjour&quot;);
map.put(3, &quot;Hola&quot;);
</code></pre>
<p>If we need to get the third pair:</p>
<pre><code class="language-java">String str = map.get(3);
System.out.println(str);
</code></pre>
<p>The output is <code>Hola</code>.</p>
<p>When <code>put(Key k, Value v)</code> method is called, the following steps are performed under the hood:</p>
<ol>
<li>If <code>key</code> is <code>null</code>, the key-value pair (Entry) is put into the first bucket.</li>
<li>If not <code>null</code>, the <code>hashCode()</code> method is called on the key.</li>
<li><code>HashMap</code> takes the key hash value, processes it through the internal computations to get the number of the bucket to be used.</li>
<li>If the chosen bukcet is empty, the <code>Entry</code> is put there.</li>
<li>If the bucket is not empty, it iterates through all the existing entries inside the bucket and pares their keys with key from the <code>put()</code> method using <code>equals()</code>.</li>
<li>if equals() returns <code>false</code> for each iteration, the <code>Entry</code> will be stored in the current bucket.</li>
<li>if equals() returns <code>true</code> for some case, so the <code>Entry</code> has the same key as from the <code>put()</code> method, this <code>Entry</code> value will be replaced by the new value.</li>
</ol>
<p>When <code>get(Key k)</code> method is called:</p>
<ol>
<li>If key is <code>null</code>, we go to the first bucket and look for the <code>Entry</code> with the key == null, if exists, its <code>value</code> is returned.</li>
<li>If key is not <code>null</code>, the <code>hashCode()</code> method is called on the <code>key</code>.</li>
<li><code>hashMap</code> takes the <code>key</code> hash value, processes it throught the internal compuattions get get the number of the bucket to be used.</li>
<li>If the bucket is empty, return <code>null</code>.</li>
<li>if Bucket contains several elements, we iterate through each of them and compare equals() the key of each <code>Entry</code> with our <code>key</code>. If <code>true</code> return matching <code>Entry value</code>, else return <code>null</code>.</li>
</ol>
<p>So, we have just seen that the <code>equals()</code> and <code>hashCode()</code> methods work together inside the <code>HashMap</code> to get and put the data: <code>hashCode()</code> is used to compute the bucket number and <code>equals()</code> is used to find the <code>Entry</code> with the same key.</p>
<p>Now we know more than enough to implement the <code>hashCode()</code> and <code>equals()</code> methods.</p>
<pre><code class="language-java">@Override
public int hashCode(){
    return Objects.hash(idNumber);
}
</code></pre>
<p>And the final version :</p>
<pre><code class="language-java">public class Humanity {
    private long idNumber;
    private String name;

    public Humanity(long idNumber, String name){
        this.idNumber = idNmber;
        this.name = name;
    }

    @Override
    public boolean equals(Object o){
        if (this == o)
            return true;
        if (o == null)
            return false;
        if (this.getClass() != o.getClass())
            return false;
        Humanity h = (Humanity) o;
        return this.idNumber == h.idNumber;
    }

    @Override
    public int hashCode() {
        return Objects.hash(idNumber);
    }
}
</code></pre>
]]></content>
    </entry>
</feed>